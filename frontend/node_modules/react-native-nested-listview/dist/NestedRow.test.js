var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as React from 'react';
import { Text } from 'react-native';
import { NestedRow } from './NestedRow';
import { render, waitFor } from '@testing-library/react-native';
describe('NestedListView', () => {
    test('renders with succesfully', () => __awaiter(void 0, void 0, void 0, function* () {
        const { UNSAFE_getByType } = render(<NestedRow level={1} style={{ borderColor: 'black', borderWidth: 1 }}>
        <Text>Test</Text>
      </NestedRow>);
        yield waitFor(() => {
            const component = UNSAFE_getByType(NestedRow);
            expect(component).toBeDefined();
        });
    }));
    test('renders without level passed', () => __awaiter(void 0, void 0, void 0, function* () {
        const { UNSAFE_getByType } = render(<NestedRow style={{ borderColor: 'black', borderWidth: 1 }}>
        <Text>Test</Text>
      </NestedRow>);
        yield waitFor(() => {
            const component = UNSAFE_getByType(NestedRow);
            expect(component).toBeDefined();
        });
    }));
    test('renders with height passed', () => __awaiter(void 0, void 0, void 0, function* () {
        const { UNSAFE_getByType } = render(<NestedRow level={1} height={60} paddingLeftIncrement={15} style={{ borderColor: 'black', borderWidth: 1 }}>
        <Text>Test</Text>
      </NestedRow>);
        yield waitFor(() => {
            const component = UNSAFE_getByType(NestedRow);
            expect(component).toBeDefined();
        });
    }));
});
//# sourceMappingURL=NestedRow.test.js.map