import hashObjectGenerator from 'object-hash';
import React, { useCallback, useEffect, useState } from 'react';
import isEqual from 'react-fast-compare';
import { StyleSheet, Text, View } from 'react-native';
import shortid from 'shortid';
import { NodeView } from './NodeView';
const styles = StyleSheet.create({
    errorContainer: {
        borderColor: 'rgb(84, 85, 86)',
        backgroundColor: 'rgb(237, 57, 40)',
        borderWidth: 1,
        justifyContent: 'center',
        alignItems: 'center',
        height: 60,
    },
    errorText: {
        color: 'rgb(255, 255, 255)',
        fontSize: 17,
        fontWeight: 'bold',
    },
});
const defaultRootNode = {
    _internalId: 'root',
    items: [],
    name: 'root',
    opened: true,
    hidden: true,
};
const NestedListView = React.memo(({ getChildrenName, renderNode, data, onNodePressed, extraData, keepOpenedState, }) => {
    const generateIds = useCallback((node) => {
        if (!node) {
            return {
                _internalId: shortid.generate(),
            };
        }
        const childrenName = getChildrenName
            ? getChildrenName(node)
            : 'items';
        let children = node[childrenName];
        if (children) {
            if (!Array.isArray(children)) {
                children = Object.keys(children).map((key) => children[key]);
            }
            node[childrenName] = children.map((_, index) => generateIds(children[index]));
        }
        if (node._internalId) {
            // @ts-ignore
            delete node._internalId;
        }
        node._internalId = hashObjectGenerator(node, {
            algorithm: 'md5',
            encoding: 'base64',
        });
        return node;
    }, [getChildrenName]);
    const generateRootNode = useCallback((props) => {
        return {
            _internalId: 'root',
            items: props.data
                ? props.data.map((_, index) => generateIds(props.data[index]))
                : [],
            name: 'root',
            opened: true,
            hidden: true,
        };
    }, [generateIds]);
    const [_root, setRoot] = useState(defaultRootNode);
    useEffect(() => {
        setRoot(generateRootNode({
            getChildrenName,
            renderNode,
            data,
            onNodePressed,
            extraData,
        }));
    }, [
        data,
        extraData,
        getChildrenName,
        renderNode,
        onNodePressed,
        generateRootNode,
    ]);
    const _getChildrenName = (node) => {
        if (node.name === 'root') {
            return 'items';
        }
        return getChildrenName ? getChildrenName(node) : 'items';
    };
    const renderErrorMessage = (prop) => {
        return (<View style={styles.errorContainer}>
          <Text style={styles.errorText}>prop {prop} has not been passed</Text>
        </View>);
    };
    if (!renderNode) {
        return renderErrorMessage('renderNode');
    }
    if (!data) {
        return renderErrorMessage('data');
    }
    return (<NodeView getChildrenName={_getChildrenName} node={_root} onNodePressed={onNodePressed} level={0} renderNode={renderNode} extraData={extraData} keepOpenedState={keepOpenedState}/>);
}, isEqual);
export { NestedListView };
//# sourceMappingURL=NestedListView.js.map